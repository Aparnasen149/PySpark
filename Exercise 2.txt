Exercise 2
**********
Dataset is available in the link :
https://github.com/Aparnasen149/Data/blob/master/orders_data
https://github.com/Aparnasen149/Data/blob/master/order_items_data
https://github.com/Aparnasen149/Data/blob/master/customers_data


Data is available in local file system /data/retail_db
Source directories: /data/retail_db/orders and /data/retail_db/customers
Source delimiter: comma (“,”)
Source Columns - orders - order_id, order_date, order_customer_id, order_status
Source Columns - customers - customer_id, customer_fname, customer_lname and many more
Get the customers who have not placed any orders, sorted by customer_lname and then customer_fname
Target Columns: customer_lname, customer_fname
Number of files - 1
Target Directory: /user/<YOUR_USER_ID>/solutions/solutions02/inactive_customers
Target File Format: TEXT
Target Delimiter: comma (“, ”)
Compression: N/A

Solution
********
ordersRdd = sc.textFile("/user/aparna149/aparna/orders")
ordersMap = ordersRdd.map(lambda x: (int(x.split(",")[2]), int(x.split(",")[0])))

customersRdd = sc.textFile("/user/aparna149/aparna/customers")
customersMap = customersRdd.map(lambda x: (int(x.split(",")[0]), (x.split(",")[2],x.split(",")[1])))

customersLeftJoinOrders = customersMap.leftOuterJoin(ordersMap)

for i in customersLeftJoinOrders.take(20): print(i)
customersLeftJoinOrdersNoOrders = customersLeftJoinOrders.filter(lambda x: x[1][1] == None)

customerNames = customersLeftJoinOrdersNoOrders.map(lambda x: x[1][0])

customerNamesSorted = customerNames.sortByKey().map(lambda x: str(x[0])+","+str(x[1]))
for i in customerNamesSorted.collect(): print(i)

customerNamesSorted.saveAsTextFile("/user/aparna149/solutions/solutions02/inactive_customers")
